name: Release & Versioning

on:
  push:
    tags:
      - 'v*.*.*'

env:
  DOCKER_REGISTRY: ghcr.io

jobs:
  # ============================================================================
  # CREATE GITHUB RELEASE
  # ============================================================================
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        run: |
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD > CHANGELOG.txt
          cat CHANGELOG.txt
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.txt
          draft: false
          prerelease: false
  
  # ============================================================================
  # BUILD & PUSH RELEASE IMAGES
  # ============================================================================
  build-release-images:
    name: Build & Push Release Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Build and push versioned image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile${{ matrix.component == 'frontend' && '.frontend' || '' }}
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/apfa-${{ matrix.component }}:${{ steps.version.outputs.VERSION }}
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/apfa-${{ matrix.component }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  # ============================================================================
  # DEPLOY RELEASE TO PRODUCTION
  # ============================================================================
  deploy-release:
    name: Deploy Release to Production
    runs-on: ubuntu-latest
    needs: build-release-images
    environment:
      name: production
      url: https://apfa.yourdomain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy release to production
        run: |
          cd infra
          cdk deploy --require-approval never
        env:
          IMAGE_TAG: ${{ github.ref_name }}
      
      - name: Run post-deployment validation
        run: |
          # Wait for deployment
          sleep 60
          
          # Validate health
          curl -f https://apfa.yourdomain.com/health || exit 1
          
          # Validate metrics
          curl -f https://apfa.yourdomain.com/metrics || exit 1
          
          echo "Production deployment validated"
      
      - name: Notify deployment success
        run: |
          echo "Release ${{ github.ref_name }} deployed successfully"
          # Add Slack/Teams notification here

